public class Main {
    public static void main(String[] args) {
        SimpleGame simpleGame = new SimpleGame();
    }
}


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import static java.awt.Color.*;

public class SimpleGame extends JFrame implements ActionListener, KeyListener {

    JLabel label;
    ArrayList<JLabel> fallingObjects;
    ArrayList<Integer> fallingObjectXPositions;
    ArrayList<Integer> fallingObjectYPositions;
    ArrayList<JLabel> bullets;
    ArrayList<Integer> bulletYPositions;
    Random random = new Random();
    ImageIcon playerIcon = new ImageIcon("rocketvector.png");
    ImageIcon fallingObject = new ImageIcon("meteorvector.png");
    ImageIcon bulletIcon = new ImageIcon("bulletvector.png");
    Timer timer;
    int playerX = 200;
    int playerY = 600;
    int fallingObjectX;
    int fallingOjectY = -50;
    int objectSpeed = 10;
    int objectCount = 8;
    int moveSpeed = 10;
    int bulletSpeed = 15;
    int bulletCount = 10;
    boolean moveLeft = false;
    boolean moveRight = false;
    boolean gameOver = false;
    int score = 0;
    JLabel labelScore;
    JPanel panelEndGame;
    JLabel labelGameOver;
    //Font customFont;
    JLabel labelTryAgain;
    JLabel labelYesNo;
    boolean startGame = false;
    JPanel startMenu;
    JLabel labelTitle;
    JLabel labelStart;
    JLabel labelExit;

    public SimpleGame() {
        this.setPreferredSize(new Dimension(800, 800));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(null);
        this.setTitle("Simple Game");
        this.setIconImage(playerIcon.getImage());
        this.setResizable(false);
        this.getContentPane().setBackground(black);


        label = new JLabel();
        label.setIcon(playerIcon);
        label.setBounds(playerX, playerY, playerIcon.getIconWidth(), playerIcon.getIconHeight());
        label.setVisible(false);


        fallingObjects = new ArrayList<>();
        fallingObjectXPositions = new ArrayList<>();
        fallingObjectYPositions = new ArrayList<>();
        bullets = new ArrayList<>();
        bulletYPositions = new ArrayList<>();

        for (int i = 0; i < objectCount; i++) {
            JLabel label2 = new JLabel();
            label2.setIcon(fallingObject);
            fallingObjectX = random.nextInt(800 - fallingObject.getIconWidth());

            fallingObjectXPositions.add(fallingObjectX);
            fallingObjectYPositions.add(fallingOjectY);
            label2.setBounds(fallingObjectX, fallingOjectY, fallingObject.getIconWidth(), fallingObject.getIconHeight());

            fallingObjects.add(label2);
            this.add(label2);

        }

        labelScore = new JLabel();
        labelScore.setBounds(10, 0, 100, 50);
        labelScore.setBackground(black);
        labelScore.setForeground(white);
        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(25f);
            labelScore.setFont(customFont);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (FontFormatException e) {
            throw new RuntimeException(e);
        }
        labelScore.setText(String.valueOf(score) + " P");
        labelScore.setOpaque(true);
        labelScore.setVisible(false);

        panelEndGame = new JPanel();
        panelEndGame.setBounds(150, 200, 500, 400);
        panelEndGame.setLayout(new BoxLayout(panelEndGame, BoxLayout.Y_AXIS));
        panelEndGame.add(Box.createRigidArea(new Dimension(0, 50)));
        panelEndGame.setBackground(black);
        panelEndGame.setVisible(false);

        labelGameOver = new JLabel();
        labelGameOver.setPreferredSize(new Dimension(200, 100));
        labelGameOver.setAlignmentX(Component.CENTER_ALIGNMENT);

        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(35f);
            labelGameOver.setFont(customFont);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        labelGameOver.setText("GAME OVER");
        labelGameOver.setBackground(black);
        labelGameOver.setForeground(white);
        labelGameOver.setVisible(true);


        labelTryAgain = new JLabel();
        labelTryAgain.setAlignmentX(Component.CENTER_ALIGNMENT);

        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(25f);
            labelTryAgain.setFont(customFont);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        labelTryAgain.setText("TRY AGAIN?");
        labelTryAgain.setBackground(black);
        labelTryAgain.setForeground(white);
        labelTryAgain.setVisible(true);

        labelYesNo = new JLabel();
        labelYesNo.setAlignmentX(Component.CENTER_ALIGNMENT);
        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(25f);
            labelYesNo.setFont(customFont);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        labelYesNo.setText("Y / N ?");
        labelYesNo.setBackground(black);
        labelYesNo.setForeground(white);

        panelEndGame.add(labelGameOver);
        panelEndGame.add(Box.createRigidArea(new Dimension(0, 50)));
        panelEndGame.add(labelTryAgain);
        panelEndGame.add(Box.createRigidArea(new Dimension(0, 50)));
        panelEndGame.add(labelYesNo);

        startMenu = new JPanel();
        startMenu.setBounds(0,0,800,800);
        startMenu.setLayout(new BoxLayout(startMenu, BoxLayout.Y_AXIS));
        startMenu.add(Box.createRigidArea(new Dimension(0, 150)));
        startMenu.setBackground(black);
        startMenu.setVisible(true);

        labelTitle = new JLabel();
        labelTitle.setAlignmentX(Component.CENTER_ALIGNMENT);
        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(25f);
            labelTitle.setFont(customFont);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        labelTitle.setText("Simple Game - Space Invader");
        labelTitle.setBackground(black);
        labelTitle.setForeground(white);

        labelStart = new JLabel();
        labelStart.setAlignmentX(Component.CENTER_ALIGNMENT);
        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(20f);
            labelStart.setFont(customFont);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        labelStart.setText("Start [ENTER]");
        labelStart.setBackground(black);
        labelStart.setForeground(white);

        labelExit = new JLabel();
        labelExit.setAlignmentX(Component.CENTER_ALIGNMENT);
        try {
            Font customFont = Font.createFont(Font.TRUETYPE_FONT, new File("PressStart2p-Regular.ttf")).deriveFont(20f);
            labelExit.setFont(customFont);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        labelExit.setText("Exit [E]");
        labelExit.setBackground(black);
        labelExit.setForeground(white);

        this.addKeyListener(this);

        startMenu.add(labelTitle);
        startMenu.add(Box.createRigidArea(new Dimension(0, 150)));
        startMenu.add(labelStart);
        startMenu.add(Box.createRigidArea(new Dimension(0, 150)));
        startMenu.add(labelExit);

        this.add(panelEndGame);
        this.add(labelScore);
        this.add(label);
        this.add(startMenu);
        this.setVisible(true);
        this.pack();

        timer = new Timer(20, this);
        //timer.start();


    }


    @Override
    public void keyTyped(KeyEvent e) {
        if (e.getKeyChar() == ' ') {
            if (bullets.size() < bulletCount) {
                JLabel bullet = new JLabel(bulletIcon);
                bullet.setBounds(playerX + playerIcon.getIconWidth() / 2 - bulletIcon.getIconWidth() / 2, playerY, bulletIcon.getIconWidth(), bulletIcon.getIconHeight());
                bullets.add(bullet);
                bulletYPositions.add(playerY);
                this.add(bullet);
            }
        }

    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
            startGame();
        }
        if (!startGame && ((e.getKeyCode() == KeyEvent.VK_E) || (e.getKeyCode() == KeyEvent.VK_ESCAPE))){
            System.exit(0);
        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            moveLeft = true;
        }
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            moveRight = true;
        }
        label.setBounds(playerX, playerY, playerIcon.getIconWidth(), playerIcon.getIconHeight());
        if (gameOver && e.getKeyCode() == KeyEvent.VK_Y) {
            resetGame();
        } else if (gameOver && (e.getKeyCode() == KeyEvent.VK_N)) {
            System.exit(0);
        }

    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            moveLeft = false;
        }
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            moveRight = false;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameOver) {

            if (moveLeft && playerX > 0) {
                playerX -= moveSpeed;
            }
            if (moveRight && playerX < 800 - playerIcon.getIconWidth()) {
                playerX += moveSpeed;
            }
            label.setBounds(playerX, playerY, playerIcon.getIconWidth(), playerIcon.getIconHeight());

            for (int i = 0; i < fallingObjectYPositions.size(); i++) {
                int newY = fallingObjectYPositions.get(i) + objectSpeed;
                fallingObjectYPositions.set(i, newY);

                if (newY > 800) {
                    fallingObjectYPositions.set(i, random.nextInt(400) - 400);
                    fallingObjectXPositions.set(i, random.nextInt(800 - fallingObject.getIconWidth()));
                }
                fallingObjects.get(i).setBounds(fallingObjectXPositions.get(i), fallingObjectYPositions.get(i), fallingObject.getIconWidth(), fallingObject.getIconHeight());

                Rectangle playerBounds = new Rectangle(playerX + 25
                        , playerY + 25
                        , playerIcon.getIconWidth() - 35
                        , playerIcon.getIconHeight() - 5);
                Rectangle meteorBounds = new Rectangle(fallingObjectXPositions.get(i) + 10
                        , fallingObjectYPositions.get(i) + 35
                        , fallingObject.getIconWidth() - 5
                        , fallingObject.getIconHeight() - 10);

                boolean collisionDetected = false;

                for (int j = 0; j < bullets.size(); j++) {
                    if (bullets.get(j).getBounds().intersects(meteorBounds)) {
                        // Mermiyi kaldır
                        this.remove(bullets.get(j));
                        bullets.remove(j);
                        bulletYPositions.remove(j);
                        j--;
                        fallingObjectYPositions.set(i, -100);
                        fallingObjectXPositions.set(i, random.nextInt(800 - fallingObject.getIconWidth()));
                        fallingObjects.get(i).setBounds(fallingObjectXPositions.get(i),
                                -100,
                                fallingObject.getIconWidth(),
                                fallingObject.getIconHeight());
                        collisionDetected = true;
                        score++;
                        labelScore.setText(String.valueOf(score) + " P");
                        break;
                    }
                }

                if (playerBounds.intersects(meteorBounds)) {
                    gameOver = true;
                    timer.stop();
                    //JOptionPane.showMessageDialog(this, "Game Over!");
                    //labelGameOver.setVisible(true);
                    panelEndGame.setVisible(true);
                    break;
                }

            }

            for (int i = 0; i < bullets.size(); i++) {
                int newY = bulletYPositions.get(i) - bulletSpeed;
                bulletYPositions.set(i, newY);

                if (newY < 0) { // Mermi ekrandan çıkarsa sil
                    this.remove(bullets.get(i));
                    bullets.remove(i);
                    bulletYPositions.remove(i);
                    i--;
                } else {
                    bullets.get(i).setBounds(bullets.get(i).getX(), newY, bulletIcon.getIconWidth(), bulletIcon.getIconHeight());
                }
            }
        }
        repaint();

    }

    public void resetGame() {
        playerX = 200;
        playerY = 600;
        score = 0;
        labelScore.setText(score + " P");
        gameOver = false;

        for (int i = 0; i < objectCount; i++) {
            fallingObjectYPositions.set(i, random.nextInt(400) - 400);  // Üstten düşmesi için
            fallingObjectXPositions.set(i, random.nextInt(800 - fallingObject.getIconWidth()));
            fallingObjects.get(i).setBounds(fallingObjectXPositions.get(i), fallingObjectYPositions.get(i), fallingObject.getIconWidth(), fallingObject.getIconHeight());
        }

        for (int i = 0; i < bullets.size(); i++) {
            this.remove(bullets.get(i));
        }
        bullets.clear();
        bulletYPositions.clear();

        panelEndGame.setVisible(false);  // Oyun bitti ekranını gizle
        timer.start();
    }
    public void startGame(){
        startGame = true;
        label.setVisible(true);
        labelScore.setVisible(true);
        startMenu.setVisible(false);
        timer.start();
    }

}


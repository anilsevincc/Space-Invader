public class Main {
    public static void main(String[] args) {
        SimpleGame simpleGame = new SimpleGame();
    }
}


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Random;

import static java.awt.Color.*;

public class SimpleGame  extends JFrame implements ActionListener,KeyListener {

    JLabel label;
    ArrayList<JLabel> fallingObjects;
    ArrayList<Integer> fallingObjectXPositions;
    ArrayList<Integer> fallingObjectYPositions;
    ArrayList<JLabel> bullets;
    ArrayList<Integer> bulletYPositions;
    Random random = new Random();
    ImageIcon playerIcon = new ImageIcon("rocket.png");
    ImageIcon fallingObject = new ImageIcon("meteor.png");
    ImageIcon bulletIcon = new ImageIcon("bullet.png");
    Timer timer;
    int playerX = 200;
    int playerY = 600;
    int fallingObjectX;
    int fallingOjectY = 0;
    int objectSpeed = 10;
    int objectCount = 3;
    int moveSpeed = 10;
    int bulletSpeed = 15;
    int bulletCount = 10;
    boolean moveLeft = false;
    boolean moveRight = false;
    boolean gameOver = false;

    public SimpleGame(){
        this.setPreferredSize(new Dimension(800,800));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(null);
        this.getContentPane().setBackground(black);

        label = new JLabel();
        label.setIcon(playerIcon);
        label.setBounds(playerX,playerY, playerIcon.getIconWidth(), playerIcon.getIconHeight());


        fallingObjects = new ArrayList<>();
        fallingObjectXPositions = new ArrayList<>();
        fallingObjectYPositions = new ArrayList<>();
        bullets = new ArrayList<>();
        bulletYPositions = new ArrayList<>();

        for (int i = 0; i<objectCount; i++){
            JLabel label2 = new JLabel();
            label2.setIcon(fallingObject);
            fallingObjectX = random.nextInt(800 - fallingObject.getIconWidth());

            fallingObjectXPositions.add(fallingObjectX);
            fallingObjectYPositions.add(fallingOjectY);
            label2.setBounds(fallingObjectX,fallingOjectY,fallingObject.getIconWidth(),fallingObject.getIconHeight());

            fallingObjects.add(label2);
            this.add(label2);
        }


        this.addKeyListener(this);

        this.add(label);
        this.setVisible(true);
        this.pack();

        timer = new Timer(20,this);
        timer.start();

    }


    @Override
    public void keyTyped(KeyEvent e) {
        if (e.getKeyChar() == ' '){
            if (bullets.size() < bulletCount){
                JLabel bullet = new JLabel(bulletIcon);
                bullet.setBounds(playerX + playerIcon.getIconWidth() / 2 - bulletIcon.getIconWidth() / 2, playerY,bulletIcon.getIconWidth(),bulletIcon.getIconHeight());
                bullets.add(bullet);
                bulletYPositions.add(playerY);
                this.add(bullet);
            }
        }

    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT){
            moveLeft = true;
        }
        if (e.getKeyCode() == KeyEvent.VK_RIGHT){
            moveRight = true;
        }
        label.setBounds(playerX,playerY,playerIcon.getIconWidth(),playerIcon.getIconHeight());
    }

    @Override
    public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_LEFT){
            moveLeft = false;
        }
        if (e.getKeyCode() == KeyEvent.VK_RIGHT){
            moveRight = false;
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!gameOver) {

            if (moveLeft && playerX > 0) {
                playerX -= moveSpeed;
            }
            if (moveRight && playerX < 800 - playerIcon.getIconWidth()) {
                playerX += moveSpeed;
            }
            label.setBounds(playerX, playerY, playerIcon.getIconWidth(), playerIcon.getIconHeight());

            for (int i = 0; i < fallingObjectYPositions.size(); i++) {
                int newY = fallingObjectYPositions.get(i) + objectSpeed;
                fallingObjectYPositions.set(i, newY);

                if (newY > 800) {
                    fallingObjectYPositions.set(i, random.nextInt(400) - 400);
                    fallingObjectXPositions.set(i, random.nextInt(800 - fallingObject.getIconWidth()));
                }
                fallingObjects.get(i).setBounds(fallingObjectXPositions.get(i), fallingObjectYPositions.get(i), fallingObject.getIconWidth(), fallingObject.getIconHeight());

                Rectangle playerBounds = new Rectangle(playerX + 25
                                                    , playerY + 25
                                                    , playerIcon.getIconWidth() -35
                                                    , playerIcon.getIconHeight() -5);
                Rectangle meteorBounds = new Rectangle(fallingObjectXPositions.get(i) + 10
                                                    ,fallingObjectYPositions.get(i) + 35
                                                    , fallingObject.getIconWidth() -5
                                                    ,fallingObject.getIconHeight() -10);

                boolean collisionDetected = false;

                for (int j = 0; j < bullets.size(); j++) {
                    if (bullets.get(j).getBounds().intersects(meteorBounds)) {
                        // Mermiyi kaldır
                        this.remove(bullets.get(j));
                        bullets.remove(j);
                        bulletYPositions.remove(j);
                        j--;
                        fallingObjectYPositions.set(i, -100);
                        fallingObjectXPositions.set(i, random.nextInt(800 - fallingObject.getIconWidth()));
                        fallingObjects.get(i).setBounds(fallingObjectXPositions.get(i),
                                                      -100,
                                                        fallingObject.getIconWidth(),
                                                        fallingObject.getIconHeight());
                        collisionDetected = true;
                        break;
                    }
                }

                if (playerBounds.intersects(meteorBounds)) {
                    gameOver = true;
                    timer.stop();
                    JOptionPane.showMessageDialog(this, "Game Over!");
                    break;
                }

            }

            for (int i = 0; i < bullets.size(); i++){
                int newY = bulletYPositions.get(i) - bulletSpeed;
                bulletYPositions.set(i, newY);

                if (newY < 0) { // Mermi ekrandan çıkarsa sil
                    this.remove(bullets.get(i));
                    bullets.remove(i);
                    bulletYPositions.remove(i);
                    i--;
                } else {
                    bullets.get(i).setBounds(bullets.get(i).getX(), newY, bulletIcon.getIconWidth(), bulletIcon.getIconHeight());
                }
            }
        }
        repaint();

    }

}

